Author: Maximilian Lika <Maximilian-Lika@gmx.de>
Title: A perlmass tree with SVG::ChristmasTree and pEFL
Topic: Write a GUI with pEFL

=encoding utf8

=head1 A Perlmass Tree

=head2 How to buy a crhistmas tree on christmas day :-S

It's just before christmas. The air smells of cinnamon and gingerbread, the most beautiful christmas melodies
sound everywhere, the christmas goose has already been ordered, but wait... A very important detail is missing. Rudolph, the chistmas grouch, did not buyed a christmas tree!! And so his wife Fjolla, a christmas elf, asks him to finally get a tree. The same procedure as every year...

But it's just before christmas... And so the christmas tree stand of Knecht Ruprecht is sold out. 

=head2 A Do-it-Youself tree with perl

"No problem", Rudolph thinks. Nowadays you can create a christmas tree with perl. There was a wonderful
module by Dave Cross in the L<Perl Advent Calendar 2018|https://www.perladvent.org/2018/2018-12-12.html>. But to find the perfect fitting tree, you have to hack the code. Therefore a GUI is needed. And why not to try the new module pEFL?

pEFL is an object oriented binding to the L<Enlightenment Foundation Libraries|https://www.enlightenment.org/about-efl>. And even if it is a very young module, the Elementary part (the widget toolkit) is already very usable. But let's see:

All pEFL::Elm applications share the following basic framework, which initializes Elementary, runs the 
Mainloop and do cleanup when the program exists:

	use SVG::ChristmasTree; # for creating the christmas tree
	use pEFL::Elm;
	use pEFL::Evas; # for EVAS_CONSTANTS_

	pEFL::Elm::init($#ARGV, \@ARGV);
	pEFL::Elm::policy_set(ELM_POLICY_QUIT, ELM_POLICY_QUIT_LAST_WINDOW_CLOSED);
	
	### (...GUI CODE COMES HERE...)
	
	pEFL::Elm::run();
	pEFL::Elm::shutdown();
	
Pehaps a little explanation to the policies set with C<< pEFL::Elm::policy_set() >>: This causes the Mainloop started by C<< pEFL::Elm::run() >> to quit automatically when the last window of the application is closed.

To create a standard window with a standard background we use the special constructor C<< pEFL::Elm::Win->util_standard_add($name, $title) >>. The autodel setting means that if someone hits the close button, or otherwise uses some normal environment mechanism (keybinding, menu) to close the window, the window object is automatically deleted on the application side. If you don't do this, these mechanisms will not work and the window will stay around if you not manually add a callback to handle "delete, request" events.

	my $win = pEFL::Elm::Win->util_standard_add("christmas-tree", "Christmas Tree");
	$win->autodel_set(1);
	$win->resize(800,800);
	
The content will be framed in a pEFL::Box. Attention should be paid on the functions C<< $widget->size_hint_weight|align_set(x_expand|align, y_expand_align) >>. With these one controls hints for expanding and filling widgets packed to a container widget are set. Possible arguments are 0.0 (no expand/no fill) to 1.0 (expand/fill to the left|bottom). For the last ones there exists the special constants EVAS_HINT_EXPAND or EVAS_HINT_FILL. Becaus it is much paperwork, we create a function for widgets that expand and fill in all directions:

	my $frame = pEFL::Elm::Frame->add($win);
	_expand_widget($frame);
	my $container = pEFL::Elm::Box->add($win);
	_expand_widget($container);
	$frame->style_set("pad_large");
	$frame->content_set($container);
	$frame->show(); $win->resize_object_add($frame);

	[...]
	
	sub _expand_widget {
		my ($widget) = @_;
		$widget->size_hint_weight_set(EVAS_HINT_EXPAND,EVAS_HINT_EXPAND);
		$widget->size_hint_align_set(EVAS_HINT_FILL,EVAS_HINT_FILL);
	}
	
In the container box we pack three widgets: 

=over 4

=item 1. An pEFL::Elm::Image widget that serves as a viewer

	my $viewer = pEFL::Elm::Image->add($container);
	_expand_widget($viewer);
	$viewer->show(); $container->pack_end($viewer);
	
=item 2. An pEFL::Elm::Table widgets where the controlls of the several settings are aligned

A table is a (.... TODO ....)

	my $table = pEFL::Elm::Table->add($container);
	$table->padding_set(10,10);
	$table->size_hint_weight_set(EVAS_HINT_EXPAND,0);	# Expand and fill only to the
	$table->size_hint_align_set(EVAS_HINT_FILL,0);		# X-Direction
	$table->show(); $container->pack_end($table);
	
For changing the settings of the tree we add several sliders.

	_add_slider_setting($table, 4, {label => "Width of the tree", min => 700, max => 3000, key => "width"});
	_add_slider_setting($table, 5, {label => "Layers", min => 2, max => 8, key => "layers"});
	_add_slider_setting($table, 6, {label => "Trunk length", min => 50, max => 300, key => "trunk_length"});
	_add_slider_setting($table, 7, {label => "Pot height", min => 100, max => 400, key => "pot_height"});
	
For this we use the custom function _add_slider_settings($table,$row,$option_hash):

	sub _add_slider_setting {
		my ($table,$row,$opts) = @_;
	
		my $label = pEFL::Elm::Label->add($table);
		$label->text_set($opts->{label});
		$label->show(); $table->pack($label,0,$row,1,1);
	
		my $spinner = pEFL::Elm::Slider->add($table);
		$spinner->size_hint_align_set(EVAS_HINT_FILL,0.5);
		$spinner->size_hint_weight_set(EVAS_HINT_EXPAND,0.0);
		$spinner->min_max_set($opts->{min},$opts->{max});
		$spinner->step_set(1);
		$spinner->indicator_format_set("%1.0f");
		$spinner->value_set($settings{$opts->{key}});
		$spinner->show(); $table->pack($spinner,1,$row,2,1);
	
		$spinner->smart_callback_add("delay,changed" => sub {$settings{$opts->{key}} = int($_[1]->value_get());}, undef);
	}
	
The most should be self-explaining. Therefore only two little explanations: 

With C<< $spinner->indicator_format_set("%1.0f"); >> the popup for the actual value shows only integers.

Very important is the C<< $spinner->smart_callback_add("eventName",\&eventSub,$data) >>. With this you can register an event handler for smart callbacks, the most often used event types in EFL.The callback function takes as parameters the additional $data defined in the $widget->smart_callback_add(), the object to which the event happened, and the event info data, which depends on the object type and the event at play. So the signature is

	sub smart_event_cb {
		my ($data, $obj, $evInfo) = @_;
	}

In the example code we use an anonymous subroutine as event handler, that sets the key in the setting hash with the actual value of the spinner object.

=item 3. Last we add the button to create the christmas tree to the container-box 

and show the window (don't forget this!!)

	my $btn = pEFL::Elm::Button->add($container);
	$btn->text_set("Create a new Christmas Tree");
	$btn->smart_callback_add("clicked",\&create_christmas_tree,$viewer);
	$btn->show(); $container->pack_end($btn);

	$win->show()
		
We again register a callback to the follwing event handler that creates the SVG file and let the viewer show
the created tree. A little hack is needed with $viewer->file_set(undef,""). Otherwise the viewer don't know that the file has changed:

	sub create_christmas_tree {
		my ($viewer,$obj,$evinfo) = @_;
			
		my $tree = SVG::ChristmasTree->new(\%settings);
	
		open my $fh, ">", "tree.svg" or die "Could not write to ./tree.svg: $!\n";
		print $fh $tree->as_xml;
		close $fh;
	
		$viewer->file_set(undef,"");
		$viewer->file_set("./tree.svg","");
	}

=back 
	
=head1 Conclusion

I hope you enjoyed this little introduction to pEFL. Because the perl advent articles should be light and trivial, the explained version only gives you control over the numeric settings of SVG::ChristmasTree. But under L<https://github.com/MaxPerl/TODO!!> you find an advanced version where you can also alter the colors of the tree, baubles and pot. The additions adjust the colorselector examples under examples/colorselector.pl in the pEFL distribution and hopefully are understandable.

If you want to deep into programming with pEFL see the explanations at L<pEFL>. As the API of pEFL is - apart of his object-oriented interface - deliberatly kept close to the Elementary C-API, the documentations at the L<Enlightenment docs|https://www.enlightenment.org/develop/legacy/api/c/start#> should help you, too. The perl method names usually remove the prefix at the beginning of the c functions. Therefore applying the C documentation should be no problem.

And of course, you can get help at L<Github|https://github.com/MaxPerl/Perl-Efl>. And perhaps you want to contribute and to make the pEFL bindings better? In any case there is much to do :-)

Merry christmas ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„ ðŸŽ„

=cut
